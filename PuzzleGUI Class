import tkinter as tk
from PIL import Image, ImageTk
import requests
from io import BytesIO

class PuzzleGUI:
    def __init__(self, root, image, size):
        self.root = root
        self.root.title("Jigsaw Puzzle")
        self.image = image
        self.size = size
        self.width, self.height = self.image.size
        self.piece_width = self.width // size
        self.piece_height = self.height // size
        self.puzzle = JigsawPuzzle(image, size)
        self.tiles = [[None] * size for _ in range(size)]
        self.images = [[None] * size for _ in range(size)]
        self.create_canvas()
        self.create_buttons()
        self.draw()

    def create_canvas(self):
        self.canvas = tk.Canvas(self.root, width=self.width, height=self.height, bd=0, highlightthickness=0)
        self.canvas.pack()
        self.canvas.bind("<Button-1>", self.click)

    def create_buttons(self):
        self.solve_button = tk.Button(self.root, text="Solve", command=self.solve)
        self.solve_button.pack()

    def draw(self):
        for i in range(self.size):
            for j in range(self.size):
                if self.puzzle.puzzle[i][j] != None:
                    piece = ImageTk.PhotoImage(self.puzzle.puzzle[i][j])
                    self.images[i][j] = piece  # Keeping a reference to the image
                    self.tiles[i][j] = piece
                    self.canvas.create_image(j * self.piece_width + self.piece_width // 2,
                                             i * self.piece_height + self.piece_height // 2,
                                             image=piece)

    def click(self, event):
        x, y = event.x, event.y
        col = x // self.piece_width
        row = y // self.piece_height
        if (abs(row - self.puzzle.position[0]) + abs(col - self.puzzle.position[1])) == 1:
            self.puzzle.move(self.get_direction(row, col))
            self.draw()
            if self.puzzle.is_solved():
                self.display_success_message()

    def get_direction(self, row, col):
        dx = row - self.puzzle.position[0]
        dy = col - self.puzzle.position[1]
        if dx == -1:
            return "up"
        elif dx == 1:
            return "down"
        elif dy == -1:
            return "left"
        elif dy == 1:
            return "right"

    def solve(self):
        self.puzzle = JigsawPuzzle(self.image, 3)
        self.draw()

    def display_success_message(self):
        success_window = tk.Toplevel(self.root)
        success_window.title("Congratulations!")
        success_label = tk.Label(success_window, text="Congratulations! You solved the puzzle!")
        success_label.pack()

    def start(self):
        self.draw()
        self.root.mainloop()
